# Docker Compose configuration for AISS

#################################################
# Definici贸n de servicios para el sistema AISS  #

#################################################

services:
  #-----------------------------------------
  # FASE 1: Servicios de bases de datos
  #-----------------------------------------
  mongodb:
    image: mongo:6.0.5
    container_name: aiss-mongodb
    volumes:
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/mongodb:/data/db
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/config/mongodb:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    ports:
      - "27017:27017"
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - aiss-network
      
  weaviate:
    image: semitechnologies/weaviate:1.24.3
    container_name: aiss-weaviate
    volumes:
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/weaviate:/var/lib/weaviate
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - DEFAULT_VECTORIZER_MODULE=none
      - CLUSTER_HOSTNAME=node1
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
    ports:
      - "6333:8080"
    healthcheck:
      test: wget -q --spider http://localhost:8080/v1/.well-known/ready || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    networks:
      - aiss-network

  neo4j:
    image: neo4j:5.9.0
    container_name: aiss-neo4j
    volumes:
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/neo4j/data:/data
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/neo4j/logs:/logs
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/neo4j/plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/supersecret
      - NEO4J_PLUGINS=["graph-data-science"]
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: wget -O /dev/null -q http://localhost:7474 || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - aiss-network

  minio:
    image: minio/minio:RELEASE.2023-07-21T21-12-44Z
    container_name: aiss-minio
    volumes:
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/minio:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_HEALTHCHECK_SERVER=true
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: curl -f http://127.0.0.1:9000/minio/health/ready || exit 1
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - aiss-network

  # Servicios de configuraci贸n de bases de datos
  weaviate-setup:
    image: curlimages/curl:8.2.1
    container_name: aiss-weaviate-setup
    volumes:
      - ./backend-aiss/db/weaviate/init_weaviate.sh:/scripts/init_weaviate.sh
    environment:
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_CLASS_GENERAL=GeneralKnowledge
      - WEAVIATE_CLASS_PERSONAL=PersonalKnowledge
    entrypoint: ["/bin/sh", "/scripts/init_weaviate.sh"]
    depends_on:
      - weaviate
    networks:
      - aiss-network

  minio-setup:
    image: minio/mc:latest
    container_name: aiss-minio-setup
    volumes:
      - ./backend-aiss/db/minio/init.sh:/scripts/init.sh
    entrypoint: ["/bin/sh", "/scripts/init.sh"]
    depends_on:
      - minio
    networks:
      - aiss-network
  
  neo4j-setup:
    image: neo4j:5.9.0
    container_name: aiss-neo4j-setup
    volumes:
      - ./backend-aiss/db/neo4j/init_neo4j.sh:/scripts/init_neo4j.sh
    entrypoint: ["/bin/bash", "/scripts/init_neo4j.sh"]
    environment:
      - NEO4J_HOST=neo4j
      - NEO4J_PORT=7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=supersecret
    depends_on:
      - neo4j
    networks:
      - aiss-network

  #-----------------------------------------
  # FASE 2: Servicios core
  #-----------------------------------------
  user-service:
    build: 
      context: ./backend-aiss/core-services/user-service
    image: aiss-user-service
    container_name: aiss-user-service
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-supersecretkey}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-supersecretrefreshkey}
      - AUTH_SECRET=${JWT_SECRET:-supersecretkey}
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8081/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - aiss-network

  document-service:
    build:
      context: ./backend-aiss/core-services/document-service
    image: aiss-document-service
    container_name: aiss-document-service
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_USE_SSL=false
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8082:8082"
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8082/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - aiss-network

  api-gateway:
    build:
      context: ./backend-aiss/api-gateway
    image: aiss-api-gateway
    container_name: aiss-api-gateway
    environment:
      - USER_SERVICE_URL=http://user-service:8081
      - DOCUMENT_SERVICE_URL=http://document-service:8082
      - DB_CONNECTION_SERVICE_URL=http://db-connection-service:8086
      - SCHEMA_DISCOVERY_SERVICE_URL=http://schema-discovery-service:8087
      - CONTEXT_SERVICE_URL=http://context-service:8083
      - RAG_AGENT_URL=http://rag-agent:8085
      - TERMINAL_GATEWAY_URL=http://terminal-gateway-service:8090
      - JWT_SECRET=${JWT_SECRET:-supersecretkey}
      - AUTH_SECRET=${JWT_SECRET:-supersecretkey}
      - PORT=8088
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    # El API Gateway debe ser accesible tanto desde el frontend como desde el host para pruebas
    ports:
      - "8088:8088"
    depends_on:
      user-service:
        condition: service_healthy
      document-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8088/api/health || echo "Health check still waiting..."
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - aiss-network

  #-----------------------------------------
  # FASE 3: Servicios MCP
  #-----------------------------------------
  context-service:
    build:
      context: ./backend-aiss/mcp-services/context-service
    image: aiss-context-service
    container_name: aiss-context-service
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      - EMBEDDING_SERVICE_URL=http://embedding-service:8084
      - MCP_API_URL=http://context-service:8083/api/v1/mcp
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8083:8083"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8083/health || exit 0
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - aiss-network

  embedding-service:
    build:
      context: ./backend-aiss/mcp-services/embedding-service
    image: aiss-embedding-service
    container_name: aiss-embedding-service
    # Agregar acceso a la GPU para Nomic
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      # Configuraci贸n para base de datos vectorial
      - VECTOR_DB=weaviate
      - WEAVIATE_URL=http://weaviate:8080
      # Configuraci贸n de modelo y servicios
      - MCP_SERVICE_URL=http://context-service:8083
      - GENERAL_EMBEDDING_MODEL=nomic-ai/nomic-embed-text-v1.5-fp16
      - USE_GPU=true
      - USE_8BIT=true
      - USE_FP16=true
      - CORS_ALLOWED_ORIGINS=["http://localhost:3000","http://localhost","http://localhost:80"]
      - LOG_LEVEL=info
    ports:
      - "8084:8084"
    depends_on:
      mongodb:
        condition: service_healthy
      weaviate:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8084/health || wget -qO- http://localhost:8084/ || exit 0
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - aiss-network

  rag-agent:
    build:
      context: ./backend-aiss/rag-agent
    image: aiss-rag-agent
    container_name: aiss-rag-agent
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      - EMBEDDING_SERVICE_URL=http://embedding-service:8084
      - CONTEXT_SERVICE_URL=http://context-service:8083
      - OLLAMA_API_BASE=${OLLAMA_BASE_URL:-http://ollama:11434}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=supersecret
      - DB_CONNECTION_SERVICE_URL=http://db-connection-service:8086
      - SCHEMA_DISCOVERY_SERVICE_URL=http://schema-discovery-service:8087
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
      - PORT=8085
      # Habilitamos uso de GPU para validaci贸n de consultas
      - OLLAMA_USE_GPU=true
      # Se usa la instancia local de Ollama por defecto
      - OLLAMA_IS_REMOTE=${OLLAMA_IS_REMOTE:-false}
    ports:
      - "8085:8085"
    depends_on:
      mongodb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      context-service:
        condition: service_started
      weaviate:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8085/health || exit 0
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - aiss-network

  #-----------------------------------------
  # FASE 4: Servicios DB
  #-----------------------------------------
  db-connection-service:
    build:
      context: ./backend-aiss/db-services/db-connection-service
    image: aiss-db-connection-service
    container_name: aiss-db-connection-service
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      - SCHEMA_DISCOVERY_URL=http://schema-discovery-service:8087
      - EMBEDDING_SERVICE_URL=http://embedding-service:8084
      - MCP_SERVICE_URL=http://context-service:8083
      - DB_ENCRYPTION_KEY=${DB_ENCRYPTION_KEY:-supersecretencryptionkey}
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8086:8086"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8086/health || echo "Health check still waiting..."
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - aiss-network

  schema-discovery-service:
    build:
      context: ./backend-aiss/db-services/schema-discovery-service
    image: aiss-schema-discovery-service
    container_name: aiss-schema-discovery-service
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      - DB_CONNECTION_URL=http://db-connection-service:8086
      - EMBEDDING_SERVICE_URL=http://embedding-service:8084
      - MCP_SERVICE_URL=http://context-service:8083
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=supersecret
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8087:8087"
    depends_on:
      db-connection-service:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8087/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - aiss-network

  attack-vulnerability-service:
    build:
      context: ./backend-aiss/attack-vulnerability-service
    image: aiss-attack-vulnerability-service
    container_name: aiss-attack-vulnerability-service
    environment:
      - LLM_PROVIDER_URL=http://rag-agent:8085/api/v1/llm
      - MCP_SERVICE_URL=http://context-service:8083
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8400:8400"
    restart: unless-stopped
    depends_on:
      context-service:
        condition: service_started
    healthcheck:
      test: wget -qO- http://localhost:8400/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - aiss-network

  #-----------------------------------------
  # FASE 5: Servicios Terminal
  #-----------------------------------------
  ollama:
    image: ollama/ollama:0.1.27
    container_name: aiss-ollama
    # Esta instancia local es para validaci贸n de consultas, necesita GPU para un mejor rendimiento
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    volumes:
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/ollama:/root/.ollama
    # Exponemos el puerto al host para el entorno de desarrollo
    ports:
      - "11434:11434"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:11434/api/tags || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - aiss-network

  terminal-session-service:
    build:
      context: ./backend-aiss/terminal-services/terminal-session-service
    image: aiss-terminal-session-service
    container_name: aiss-terminal-session-service
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/aiss?authSource=admin
      - MCP_SERVICE_URL=http://context-service:8083
      - JWT_SECRET=${JWT_SECRET:-supersecretkey}
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8091:8091"
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8091/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - aiss-network

  terminal-gateway-service:
    build:
      context: ./backend-aiss/terminal-services/terminal-gateway-service
    image: aiss-terminal-gateway-service
    container_name: aiss-terminal-gateway-service
    volumes:
      - ${VOLUMES_PATH:-/home/prods/ssd/aissdata}/data/terminal-ssh-keys:/keys
    environment:
      - SESSION_SERVICE_URL=http://terminal-session-service:8091
      - VULNERABILITY_SERVICE_URL=http://attack-vulnerability-service:8400
      - CONTEXT_AGGREGATOR_URL=http://terminal-context-aggregator:8093
      - MCP_SERVICE_URL=http://context-service:8083
      - RAG_AGENT_URL=http://rag-agent:8085
      - JWT_SECRET=${JWT_SECRET:-supersecretkey}
      - SSH_KEYGEN_PATH=/usr/bin/ssh-keygen
      - SSH_KEY_PATH=/keys
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8090:8090"
    depends_on:
      terminal-session-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8090/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - aiss-network

  terminal-context-aggregator:
    build:
      context: ./backend-aiss/terminal-services/terminal-context-aggregator
    image: aiss-terminal-context-aggregator
    container_name: aiss-terminal-context-aggregator
    environment:
      - EMBEDDING_SERVICE_URL=http://embedding-service:8084
      - MCP_SERVICE_URL=http://context-service:8083
      - SUGGESTION_SERVICE_URL=http://terminal-suggestion-service:8094
      - JWT_SECRET=${JWT_SECRET:-supersecretkey}
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8093:8093"
    depends_on:
      context-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8093/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - aiss-network

  terminal-suggestion-service:
    build:
      context: ./backend-aiss/terminal-services/terminal-suggestion-service
    image: aiss-terminal-suggestion-service
    container_name: aiss-terminal-suggestion-service
    environment:
      - CONTEXT_AGGREGATOR_URL=http://terminal-context-aggregator:8093
      - MCP_SERVICE_URL=http://context-service:8083
      - LLM_SERVICE_URL=http://rag-agent:8085/api/v1/llm
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - JWT_SECRET=${JWT_SECRET:-supersecretkey}
      - CORS_ALLOWED_ORIGINS='["http://localhost:3000","http://localhost","http://localhost:80"]'
      - LOG_LEVEL=info
    ports:
      - "8094:8094"
    depends_on:
      terminal-context-aggregator:
        condition: service_healthy
      rag-agent:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: wget -qO- http://localhost:8094/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - aiss-network



# Red definida para todos los servicios
networks:
  aiss-network:
    driver: bridge