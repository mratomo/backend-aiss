"""Vulnerability models for the attack-vulnerability-service."""

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any

from pydantic import BaseModel, Field


class SoftwareType(str, Enum):
    """Types of software that can be detected."""

    OPERATING_SYSTEM = "os"
    APPLICATION = "application"
    LIBRARY = "library"
    FRAMEWORK = "framework"
    DATABASE = "database"
    WEB_SERVER = "web_server"
    SERVICE = "service"
    CONTAINER = "container"
    OTHER = "other"


class SeverityLevel(str, Enum):
    """Severity level of a vulnerability."""

    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFORMATIONAL = "informational"
    UNKNOWN = "unknown"


class SoftwareInfo(BaseModel):
    """Information about detected software."""

    name: str = Field(..., description="Name of the software")
    version: Optional[str] = Field(None, description="Version of the software")
    type: SoftwareType = Field(
        default=SoftwareType.OTHER, description="Type of software"
    )
    detection_method: Optional[str] = Field(
        None, description="Method used to detect this software"
    )
    detection_command: Optional[str] = Field(
        None, description="Command used to detect this software"
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict, description="Additional metadata about the software"
    )


class OSInfo(BaseModel):
    """Operating system information."""

    type: str = Field(..., description="Type of operating system (e.g., Linux, Windows)")
    version: Optional[str] = Field(
        None, description="Version of the operating system"
    )
    distribution: Optional[str] = Field(
        None, description="Distribution name for Linux systems"
    )
    architecture: Optional[str] = Field(
        None, description="Architecture of the operating system"
    )
    kernel_version: Optional[str] = Field(
        None, description="Kernel version for Unix-like systems"
    )


class Vulnerability(BaseModel):
    """Vulnerability information."""

    id: str = Field(..., description="Unique identifier for this vulnerability")
    title: str = Field(..., description="Title/name of the vulnerability")
    description: str = Field(..., description="Description of the vulnerability")
    severity: SeverityLevel = Field(
        default=SeverityLevel.UNKNOWN, description="Severity level"
    )
    confidence: float = Field(
        default=1.0, description="Confidence score (0.0-1.0)"
    )
    affected_software: str = Field(
        ..., description="Name of the affected software"
    )
    affected_version: Optional[str] = Field(
        None, description="Affected version range"
    )
    mitre_technique_id: Optional[str] = Field(
        None, description="MITRE ATT&CK technique ID"
    )
    mitre_technique_name: Optional[str] = Field(
        None, description="MITRE ATT&CK technique name"
    )
    mitre_tactic: Optional[str] = Field(
        None, description="MITRE ATT&CK tactic"
    )
    mitigation: Optional[str] = Field(
        None, description="Suggested mitigation steps"
    )
    reference_urls: List[str] = Field(
        default_factory=list, description="Reference URLs"
    )
    created_at: datetime = Field(
        default_factory=datetime.utcnow, description="Creation timestamp"
    )


class VulnerabilityCheckRequest(BaseModel):
    """Request to check for vulnerabilities."""

    session_id: str = Field(..., description="Terminal session ID")
    os_info: OSInfo = Field(..., description="Operating system information")
    software_list: List[SoftwareInfo] = Field(
        default_factory=list, description="List of detected software"
    )


class VulnerabilitySummary(BaseModel):
    """Summary of vulnerabilities."""

    high_risk: int = Field(default=0, description="Number of high risk vulnerabilities")
    medium_risk: int = Field(default=0, description="Number of medium risk vulnerabilities")
    low_risk: int = Field(default=0, description="Number of low risk vulnerabilities")
    informational: int = Field(default=0, description="Number of informational findings")
    total: int = Field(default=0, description="Total number of vulnerabilities")


class VulnerabilityCheckResponse(BaseModel):
    """Response from vulnerability check."""

    session_id: str = Field(..., description="Terminal session ID")
    vulnerabilities: List[Vulnerability] = Field(
        default_factory=list, description="List of detected vulnerabilities"
    )
    summary: VulnerabilitySummary = Field(
        default_factory=VulnerabilitySummary, description="Summary of vulnerabilities"
    )
    scan_timestamp: datetime = Field(
        default_factory=datetime.utcnow, description="Timestamp of the check"
    )